1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]
temp = my_list[6]
my_list[6] = my_list[7]
my_list[7] = temp

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]
temp = my_list[0]
my_list[0] = my_list[3]
my_list[3] = temp

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

It doesn't work because he/she first change the value of the other list element instead of the one saved in temp, making
impossible swap values as the other value no longer exists.

4. Show how the following numbers can be sorted using the selection sort. Show the numbers after each iteration of the outer loop, similar to what is shown in the book. I am NOT looking for a copy of the code to do the sort. If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60
0   74    8   98   47   62   12   11   97   60 (0 to pos0)
0   8    74   98   47   62   12   11   97   60 (8 to pos1)
0   8    11   98   47   62   12   74   97   60 (11 to pos2)
0   8    11   12   47   62   98   74   97   60 (12 to pos3)
0   8    11   12   47   60   98   74   97   62 (60 to pos5)
0   8    11   12   47   60   62   74   97   98 (62 to pos6)
0   8    11   12   47   60   62   74   97   98 (Final)

5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
0   92   18   47   40   58    74   36   29   25 (0 to pos0)
0   18   92   47   40   58    74   36   29   25 (18 to pos1)
0   18   25   47   40   58    74   36   29   92 (25 to pos2)
0   18   25   29   40   58    74   36   47   92 (29 to pos3)
0   18   25   29   36   58    74   40   47   92 (36 to pos4)
0   18   25   29   36   40    74   58   47   92 (40 to pos5)
0   18   25   29   36   40    47   58   74   92 (47 to pos6)
0   18   25   29   36   40    47   58   74   92 (Final)

6. Show how the following numbers can be sorted using the INSERTION sort. (Note: If you think the 0 gets immediately sorted into position, you are doing it wrong. Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
74   92   18   47   40   58    0   36   29   25 (Nothing happens)
18   74   92   47   40   58    0   36   29   25 (Inserted 18 to [0])
18   47   74   92   40   58    0   36   29   25 (Inserted 47 to [1])
18   40   47   74   92   58    0   36   29   25 (Inserted 40 to [1])
18   40   47   58   74   92    0   36   29   25 (Inserted 58 to [3])
0   18   40   47   58   74   92   36   29   25 (Inserted 0 to [0])
0   18   36   40   47   58   74   92   29   25 (Inserted 36 to [2])
0   18   29   36   40   47   58   74   92   25 (Inserted 29 to [2])
0   18   25   29   36   40   47   58   74   92 (Inserted 25 to [2[)

7. Show how the following numbers can be sorted using the insertion sort:

    37   11   14   50   24    7   17   88   99    9
    11   37   14   50   24    7   17   88   99    9 (Inserted 11 to [0])
    11   14   37   50   24    7   17   88   99    9 (Inserted 14 to [1])
    11   14   37   50   24    7   17   88   99    9 (Nothing happens)
    11   14   24   37   50    7   17   88   99    9 (Inserted 24 to [2])
    7   11   14   24   37   50    17   88   99    9 (Inserted 7 to [0])
    7   11   14   17   24   37   50   88   99    9 (Inserted 17 to [3])
    7   11   14   17   24   37   50   88   99    9 (Nothing happens)
    7   11   14   17   24   37   50   88   99    9 (Nothing happens)
    7    9   11   14   17   24   37   50   88   99 (Inserted 9 to [1])

8. Explain what `min_pos` does in the selection sort.

    min_pos is position where the smallest number is located. After one scan the current position will swap the element
    with min_pos

9. Explain what `cur_pos` does in the selection sort.

    cur_pos is the current position in the list [x] in which after each scan will swap with min_pos, then advance one
    position in the list [cur_pos + 1] until the end of the list

10. Explain what `scan_pos` does in the selection sort.

    scan_pos is the position of the scan in the list. If the value of scan_pos is less than min_pos, min pos will be
    equal to scan_pos


11. Explain what `key_pos` and `key_value` are in the insertion sort.

    key_pos marks the boundary between the sorted and unsorted portions of the list. The left side will be the sorted
    side while the right side will be the unsorted side. key_value is the value we are looking to sort in the list.


12. Explain `scan_pos` in the insertion sort.

    scan_pos is the position of the scan in the list. scan_pos will only scan until it founds a value smaller than
    key_value and insert it there.

13.
import random


def selection_sort(my_list):
    """ Sort a list using the selection sort """

    # Loop through the entire array
    for cur_pos in range(len(my_list)):
        # Find the position that has the smallest number
        # Start with the current position
        min_pos = cur_pos

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):

            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:
                # It is, mark this position as the smallest
                min_pos = scan_pos

        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp


def insertion_sort(my_list):
    """ Sort a list using the insertion sort """

    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    for key_pos in range(1, len(my_list)): #100

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1

        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value): #Worst 50, avg - 25
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value


# This will point out a list
# For more information on the print formatting {:3}
# see the chapter on print formatting.
def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    # Create two lists of the same random numbers
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 10
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

    # Print the original list
    print("Original List")
    print_list(list_for_selection_sort)

    # Use the selection sort and print the result
    print("Selection Sort")
    selection_sort(list_for_selection_sort)
    print_list(list_for_selection_sort)

    # Use the insertion sort and print the result
    print("Insertion Sort")
    insertion_sort(list_for_insertion_sort)
    print_list(list_for_insertion_sort)


main()